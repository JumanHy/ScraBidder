// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241209180517_AddProfileImageToApplicationUser")]
    partial class AddProfileImageToApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "29d8c863-f035-4d7d-847e-eb6fed8408de",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5485604c-0405-4463-9149-bb7775b0d0f7",
                            Name = "Individual",
                            NormalizedName = "INDIVIDUAL"
                        },
                        new
                        {
                            Id = "1625912d-dbe8-420a-a362-268bd285c3e9",
                            Name = "Business",
                            NormalizedName = "BUSINESS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Models.ActivityLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LogId");

                    b.HasIndex("ActionId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7be72430-02cc-4a89-949d-0b94997df526",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "admin1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "803cf6ed-e990-454d-9cc9-e90668fb89e0",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31aa4427-83bc-4f14-b440-709cf13592c7",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "admin2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "efdddf41-d5c9-43c5-af30-a53f3023a9c6",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fef06056-d9a3-467f-80a7-75d02f7f769a",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "admin3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "171d312c-8286-4433-8c50-cb9cb8c588a7",
                            Status = "Blocked",
                            TwoFactorEnabled = false,
                            UserName = "admin3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24f869b6-fdde-45b9-b5c9-5e3cc4876a87",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "admin4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "7eebc908-2572-48a4-a71a-81f086552db2",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "admin4"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98461d2d-9fd7-4d33-a940-4a30cb1bcdd9",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "admin5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "e1979ded-7359-4520-984e-cf9ca31e62fd",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "admin5"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b26f66b-00ec-4cea-b293-e3d2bfcb9b3f",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "business1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "6d751a4a-ac53-4b04-9b79-88b5db8f4faf",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "business1"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb5ad52b-c40a-4fcc-b10b-c59c75614fc8",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "business2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "b1256a54-6755-4d18-af1d-7eb62267879f",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "business2"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33d7556c-b7f1-417d-82ac-b5bd09b328e7",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "business3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "947ef7b2-fa6f-43e2-8e11-d131e5a286a3",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "business3"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "587f2e75-23c9-4e97-9976-09aaeffbe779",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "business4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "52810498-1282-4e26-8a9a-209aad428532",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "business4"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2307c741-2676-44e6-af16-405d8dbfb6a6",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "business5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "5e8076de-b6ff-41ee-8c56-48f3bb6ad53c",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "business5"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c2103a5-41b2-4967-93f8-dd207d736e8c",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "individual1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "68de5648-11fa-4acc-af52-f001719a1ec6",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "individual1"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed86e6b1-ceb5-4e04-b9e7-b4e0a4900129",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "individual2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "6f93d92a-3814-4b7f-b7bf-f7c9b3345d49",
                            Status = "Blocked",
                            TwoFactorEnabled = false,
                            UserName = "individual2"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfc0b958-1a13-42f5-8ba5-213ab488e4ab",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "individual3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "061e1a5b-b153-4c06-bd01-b245ec0727ec",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "individual3"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f34e069d-7f6b-4e2e-9616-26571f58f0bc",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "individual4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "de024104-f0c3-4575-b037-9f9b89044c92",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "individual4"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67db5625-54ad-4d62-88e5-b20096f18a94",
                            CreatedAt = new DateTime(2024, 12, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1334),
                            Email = "individual5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImage = "",
                            SecurityStamp = "2f9cbc74-aabf-4b14-bc4f-ba628f3bd717",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "individual5"
                        });
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuctionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentBid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReservePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StartingBid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AuctionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            AuctionId = 1,
                            Address = "{\"city\": \"New York\", \"state\": \"NY\"}",
                            AuctionStatus = "Started",
                            CategoryId = 1,
                            Condition = "Mixed",
                            CreatedAt = new DateTime(2024, 11, 29, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1813),
                            CurrentBid = 650.00m,
                            Description = "A collection of high-grade aluminum scraps.",
                            EndingTime = new DateTime(2024, 12, 14, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1822),
                            Images = "[\"aluminum1.jpg\", \"aluminum2.jpg\"]",
                            Quantity = 100m,
                            ReservePrice = 800.00m,
                            SellerId = "4",
                            StartingBid = 500.00m,
                            StartingTime = new DateTime(2024, 12, 4, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1821),
                            Title = "Aluminum Scrap Bundle"
                        },
                        new
                        {
                            AuctionId = 2,
                            Address = "{\"city\": \"Los Angeles\", \"state\": \"CA\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 2,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1861),
                            CurrentBid = 1200.00m,
                            Description = "Various grades of copper wiring ready for recycling.",
                            EndingTime = new DateTime(2024, 11, 24, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1863),
                            Images = "[\"copper1.jpg\", \"copper2.jpg\"]",
                            Quantity = 200m,
                            ReservePrice = 1500.00m,
                            SellerId = "4",
                            StartingBid = 1000.00m,
                            StartingTime = new DateTime(2024, 11, 14, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1862),
                            Title = "Copper Wiring Scrap"
                        },
                        new
                        {
                            AuctionId = 3,
                            Address = "{\"city\": \"Houston\", \"state\": \"TX\"}",
                            AuctionStatus = "Started",
                            CategoryId = 3,
                            Condition = "New",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1868),
                            CurrentBid = 450.00m,
                            Description = "Recyclable plastic waste from industrial sources.",
                            EndingTime = new DateTime(2024, 12, 16, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1870),
                            Images = "[\"plastic1.jpg\"]",
                            Quantity = 50m,
                            ReservePrice = 600.00m,
                            SellerId = "4",
                            StartingBid = 300.00m,
                            StartingTime = new DateTime(2024, 12, 6, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1869),
                            Title = "Plastic Waste"
                        },
                        new
                        {
                            AuctionId = 4,
                            Address = "{\"city\": \"Chicago\", \"state\": \"IL\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 4,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 19, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1875),
                            CurrentBid = 800.00m,
                            Description = "Scrap iron sheets from old construction projects.",
                            EndingTime = new DateTime(2024, 11, 29, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1877),
                            Images = "[\"iron1.jpg\", \"iron2.jpg\"]",
                            Quantity = 300m,
                            ReservePrice = 1000.00m,
                            SellerId = "4",
                            StartingBid = 700.00m,
                            StartingTime = new DateTime(2024, 11, 21, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1876),
                            Title = "Iron Sheets"
                        },
                        new
                        {
                            AuctionId = 5,
                            Address = "{\"city\": \"Dallas\", \"state\": \"TX\"}",
                            AuctionStatus = "Started",
                            CategoryId = 5,
                            Condition = "New",
                            CreatedAt = new DateTime(2024, 12, 1, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1884),
                            CurrentBid = 1600.00m,
                            Description = "Premium-grade stainless steel scrap materials.",
                            EndingTime = new DateTime(2024, 12, 12, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1886),
                            Images = "[\"steel1.jpg\", \"steel2.jpg\"]",
                            Quantity = 150m,
                            ReservePrice = 2000.00m,
                            SellerId = "4",
                            StartingBid = 1500.00m,
                            StartingTime = new DateTime(2024, 12, 2, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1885),
                            Title = "Stainless Steel Scraps"
                        },
                        new
                        {
                            AuctionId = 6,
                            Address = "{\"city\": \"Atlanta\", \"state\": \"GA\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 6,
                            Condition = "Mixed",
                            CreatedAt = new DateTime(2024, 10, 20, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1890),
                            CurrentBid = 250.00m,
                            Description = "Recyclable wooden pallets from warehouses.",
                            EndingTime = new DateTime(2024, 10, 30, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1892),
                            Images = "[\"wood1.jpg\", \"wood2.jpg\"]",
                            Quantity = 500m,
                            ReservePrice = 300.00m,
                            SellerId = "4",
                            StartingBid = 200.00m,
                            StartingTime = new DateTime(2024, 10, 22, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1891),
                            Title = "Wooden Pallets"
                        },
                        new
                        {
                            AuctionId = 7,
                            Address = "{\"city\": \"Phoenix\", \"state\": \"AZ\"}",
                            AuctionStatus = "Started",
                            CategoryId = 7,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 29, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1897),
                            CurrentBid = 550.00m,
                            Description = "Glass shards from old construction materials.",
                            EndingTime = new DateTime(2024, 12, 11, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1899),
                            Images = "[\"glass1.jpg\"]",
                            Quantity = 250m,
                            ReservePrice = 700.00m,
                            SellerId = "4",
                            StartingBid = 400.00m,
                            StartingTime = new DateTime(2024, 12, 2, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1898),
                            Title = "Glass Shards"
                        },
                        new
                        {
                            AuctionId = 8,
                            Address = "{\"city\": \"Seattle\", \"state\": \"WA\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 8,
                            Condition = "Mixed",
                            CreatedAt = new DateTime(2024, 11, 14, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1904),
                            CurrentBid = 150.00m,
                            Description = "Paper waste from old documents and magazines.",
                            EndingTime = new DateTime(2024, 11, 24, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1906),
                            Images = "[\"paper1.jpg\"]",
                            Quantity = 1000m,
                            ReservePrice = 200.00m,
                            SellerId = "4",
                            StartingBid = 100.00m,
                            StartingTime = new DateTime(2024, 11, 19, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1905),
                            Title = "Paper Waste"
                        },
                        new
                        {
                            AuctionId = 9,
                            Address = "{\"city\": \"San Francisco\", \"state\": \"CA\"}",
                            AuctionStatus = "Started",
                            CategoryId = 9,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1911),
                            CurrentBid = 350.00m,
                            Description = "Used rubber tires ready for recycling.",
                            EndingTime = new DateTime(2024, 12, 15, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1912),
                            Images = "[\"rubber1.jpg\"]",
                            Quantity = 400m,
                            ReservePrice = 500.00m,
                            SellerId = "4",
                            StartingBid = 300.00m,
                            StartingTime = new DateTime(2024, 12, 5, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1912),
                            Title = "Rubber Tires"
                        },
                        new
                        {
                            AuctionId = 10,
                            Address = "{\"city\": \"Denver\", \"state\": \"CO\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 11,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 9, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1919),
                            CurrentBid = 600.00m,
                            Description = "Scrap ceramic tiles from construction sites.",
                            EndingTime = new DateTime(2024, 11, 21, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1920),
                            Images = "[\"ceramic1.jpg\"]",
                            Quantity = 50m,
                            ReservePrice = 700.00m,
                            SellerId = "4",
                            StartingBid = 500.00m,
                            StartingTime = new DateTime(2024, 11, 11, 18, 5, 15, 913, DateTimeKind.Utc).AddTicks(1919),
                            Title = "Ceramic Tiles"
                        });
                });

            modelBuilder.Entity("api.Models.BiddingHistory", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BidId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BidderId");

                    b.ToTable("BiddingHistory");
                });

            modelBuilder.Entity("api.Models.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BusinessServices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessType")
                        .HasColumnType("int");

                    b.Property<string>("CompanyVision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContactFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContactLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryJobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BusinessId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            BusinessId = 1,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business1@example.com",
                            BusinessName = "Business 1",
                            BusinessPhoneNumber = "123-456-7890",
                            BusinessServices = "",
                            BusinessType = 1,
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business1.com",
                            PrimaryContactFirstName = "John",
                            PrimaryContactLastName = "Doe",
                            PrimaryJobTitle = "CEO",
                            PrimaryPhoneNumber = "123-456-7890",
                            RegistrationNumber = "REG12345",
                            UserId = "6"
                        },
                        new
                        {
                            BusinessId = 2,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business2@example.com",
                            BusinessName = "Business 2",
                            BusinessPhoneNumber = "223-456-7890",
                            BusinessServices = "",
                            BusinessType = 1,
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business2.com",
                            PrimaryContactFirstName = "Alice",
                            PrimaryContactLastName = "Smith",
                            PrimaryJobTitle = "Manager",
                            PrimaryPhoneNumber = "223-456-7890",
                            RegistrationNumber = "REG22345",
                            UserId = "7"
                        },
                        new
                        {
                            BusinessId = 3,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business3@example.com",
                            BusinessName = "Business 3",
                            BusinessPhoneNumber = "323-456-7890",
                            BusinessServices = "",
                            BusinessType = 2,
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business3.com",
                            PrimaryContactFirstName = "Mark",
                            PrimaryContactLastName = "Brown",
                            PrimaryJobTitle = "Owner",
                            PrimaryPhoneNumber = "323-456-7890",
                            RegistrationNumber = "REG32345",
                            UserId = "8"
                        },
                        new
                        {
                            BusinessId = 4,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business4@example.com",
                            BusinessName = "Business 4",
                            BusinessPhoneNumber = "423-456-7890",
                            BusinessServices = "",
                            BusinessType = 1,
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business4.com",
                            PrimaryContactFirstName = "Linda",
                            PrimaryContactLastName = "Johnson",
                            PrimaryJobTitle = "CEO",
                            PrimaryPhoneNumber = "423-456-7890",
                            RegistrationNumber = "REG42345",
                            UserId = "9"
                        },
                        new
                        {
                            BusinessId = 5,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business5@example.com",
                            BusinessName = "Business 5",
                            BusinessPhoneNumber = "523-456-7890",
                            BusinessServices = "",
                            BusinessType = 1,
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business5.com",
                            PrimaryContactFirstName = "Sarah",
                            PrimaryContactLastName = "Williams",
                            PrimaryJobTitle = "Manager",
                            PrimaryPhoneNumber = "523-456-7890",
                            RegistrationNumber = "REG52345",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Aluminum"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Copper"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Plastic"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Iron"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Stainless Steel"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Wood"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Glass"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Paper"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Rubber"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Textile"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Ceramic"
                        });
                });

            modelBuilder.Entity("api.Models.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IndividualId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Individuals");

                    b.HasData(
                        new
                        {
                            IndividualId = 1,
                            Address = "{\"street\":\"123 Main St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Alice",
                            LastName = "Williams",
                            PhoneNumber = "987-654-3210",
                            UserId = "11"
                        },
                        new
                        {
                            IndividualId = 2,
                            Address = "{\"street\":\"456 Oak St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Bob",
                            Image = "profilepic2.jpg",
                            LastName = "Johnson",
                            PhoneNumber = "987-654-3220",
                            UserId = "12"
                        },
                        new
                        {
                            IndividualId = 3,
                            Address = "{\"street\":\"789 Pine St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Charlie",
                            Image = "profilepic3.jpg",
                            LastName = "Smith",
                            PhoneNumber = "987-654-3230",
                            UserId = "13"
                        },
                        new
                        {
                            IndividualId = 4,
                            Address = "{\"street\":\"123 Birch St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "David",
                            Image = "profilepic4.jpg",
                            LastName = "Davis",
                            PhoneNumber = "987-654-3240",
                            UserId = "14"
                        },
                        new
                        {
                            IndividualId = 5,
                            Address = "{\"street\":\"456 Maple St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Eva",
                            Image = "profilepic5.jpg",
                            LastName = "Martin",
                            PhoneNumber = "987-654-3250",
                            UserId = "15"
                        });
                });

            modelBuilder.Entity("api.Models.Notification", b =>
                {
                    b.Property<int>("NotificationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationsId"));

                    b.Property<string>("NotificationsInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationsId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("api.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShipmentId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("api.Models.TransactionHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("api.Models.WatchList", b =>
                {
                    b.Property<int>("WatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WatchId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.ActivityLog", b =>
                {
                    b.HasOne("api.Models.Action", "Action")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Auctions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("api.Models.BiddingHistory", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Biddings")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "Bidder")
                        .WithMany()
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Bidder");
                });

            modelBuilder.Entity("api.Models.Business", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithOne("Business")
                        .HasForeignKey("api.Models.Business", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Individual", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithOne("Individual")
                        .HasForeignKey("api.Models.Individual", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Notification", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Shipment", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Shipments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("api.Models.TransactionHistory", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Transactions")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.WatchList", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("watches")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Action", b =>
                {
                    b.Navigation("ActivityLogs");
                });

            modelBuilder.Entity("api.Models.ApplicationUser", b =>
                {
                    b.Navigation("Business")
                        .IsRequired();

                    b.Navigation("Individual")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Shipments");

                    b.Navigation("Transactions");

                    b.Navigation("watches");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Auctions");
                });
#pragma warning restore 612, 618
        }
    }
}

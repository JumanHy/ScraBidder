// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6e51ab76-5c2f-4f01-b23e-1d4c782f1287",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3ec3f6ee-a80e-40a0-b756-ef304d863d47",
                            Name = "Individual",
                            NormalizedName = "INDIVIDUAL"
                        },
                        new
                        {
                            Id = "062d9c4b-1645-41e4-a260-1d6ada1de783",
                            Name = "Business",
                            NormalizedName = "BUSINESS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Models.ActivityLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LogId");

                    b.HasIndex("ActionId");

                    b.HasIndex("UserId1");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f73434b1-bc1b-468e-8ab4-7f9976743390",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "admin1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c35c675-560a-4a53-885a-cda004e573c0",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "admin1",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8483d468-05e8-4766-9a6a-4af1139c7249",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "admin2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac451d8f-93e0-4248-8545-5f1517317501",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "admin2",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5653421-3324-4cc5-8d07-3c8b1b1cb9c3",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "admin3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "775fa549-6e89-4ca7-9246-58c2e9146a4e",
                            Status = "Blocked",
                            TwoFactorEnabled = false,
                            UserName = "admin3",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70e647f9-c3de-4a86-b438-6748a2183617",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "admin4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b0f8012-0a0a-4c28-9060-3a314641aa02",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "admin4",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb7e39d0-ae6b-4273-818b-0471730cb0d0",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "admin5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52768d85-7d32-4c2d-b0ea-6446c842658d",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "admin5",
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "774a2f39-0729-4fec-ab28-cadcc727b02a",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "business1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27d4687f-5819-440b-af21-b991357e0b95",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "business1",
                            UserType = "Business"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cba8385d-2fb1-4099-8a42-e2a662b79451",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "business2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "545228a9-cadd-4e25-8dca-33ac69951d87",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "business2",
                            UserType = "Business"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "720de90c-0438-4788-b2fe-b0c04e0cfadc",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "business3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a7d7b16-4081-4cd7-a94a-3e763b24e08c",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "business3",
                            UserType = "Business"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "713128cb-48d6-4412-929e-3051c222eb17",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "business4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acf56ca9-8f6d-4e7f-8f57-7afa20297f2c",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "business4",
                            UserType = "Business"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac7adb9a-c1ac-49c9-8223-3cf9683d48c0",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "business5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd99d23b-562d-4ca7-a842-59bea54d3ca9",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "business5",
                            UserType = "Business"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08c842fd-2526-40e9-aa4e-e9baffc43d42",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "individual1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c58da47-0fb1-419b-82ee-d5c8f4c48332",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "individual1",
                            UserType = "Individual"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5e3980a-e9d8-46cb-8ee8-3d5fac5df424",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "individual2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b89daf0-4f7a-460d-b865-36126b613ca1",
                            Status = "Blocked",
                            TwoFactorEnabled = false,
                            UserName = "individual2",
                            UserType = "Individual"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c280fbed-9db1-4141-890e-4c233200ab8b",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "individual3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac2f7bbb-e6db-456e-aacd-b28ad028945f",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "individual3",
                            UserType = "Individual"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9e53110-4d01-4224-858f-fb6c05c5f828",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "individual4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88a0b0a9-02b7-4040-b23b-1afbf82156ab",
                            Status = "Pending",
                            TwoFactorEnabled = false,
                            UserName = "individual4",
                            UserType = "Individual"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31a05bb3-9b39-4aa8-92a4-21969e93c6db",
                            CreatedAt = new DateTime(2024, 11, 29, 15, 43, 44, 161, DateTimeKind.Utc).AddTicks(3871),
                            Email = "individual5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dc902bf-3b98-4df9-a614-d363789a4f8b",
                            Status = "Active",
                            TwoFactorEnabled = false,
                            UserName = "individual5",
                            UserType = "Individual"
                        });
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuctionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReservePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StartingBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AuctionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("api.Models.BiddingHistory", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BidderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BidId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BidderId");

                    b.ToTable("BiddingHistory");
                });

            modelBuilder.Entity("api.Models.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BusinessServices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyVision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContactFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContactLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryJobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BusinessId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            BusinessId = 1,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business1@example.com",
                            BusinessName = "Business 1",
                            BusinessPhoneNumber = "123-456-7890",
                            BusinessServices = "",
                            BusinessType = "seller",
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business1.com",
                            PrimaryContactFirstName = "John",
                            PrimaryContactLastName = "Doe",
                            PrimaryJobTitle = "CEO",
                            PrimaryPhoneNumber = "123-456-7890",
                            RegistrationNumber = "REG12345",
                            UserId = "6"
                        },
                        new
                        {
                            BusinessId = 2,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business2@example.com",
                            BusinessName = "Business 2",
                            BusinessPhoneNumber = "223-456-7890",
                            BusinessServices = "",
                            BusinessType = "seller",
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business2.com",
                            PrimaryContactFirstName = "Alice",
                            PrimaryContactLastName = "Smith",
                            PrimaryJobTitle = "Manager",
                            PrimaryPhoneNumber = "223-456-7890",
                            RegistrationNumber = "REG22345",
                            UserId = "7"
                        },
                        new
                        {
                            BusinessId = 3,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business3@example.com",
                            BusinessName = "Business 3",
                            BusinessPhoneNumber = "323-456-7890",
                            BusinessServices = "",
                            BusinessType = "buyer",
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business3.com",
                            PrimaryContactFirstName = "Mark",
                            PrimaryContactLastName = "Brown",
                            PrimaryJobTitle = "Owner",
                            PrimaryPhoneNumber = "323-456-7890",
                            RegistrationNumber = "REG32345",
                            UserId = "8"
                        },
                        new
                        {
                            BusinessId = 4,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business4@example.com",
                            BusinessName = "Business 4",
                            BusinessPhoneNumber = "423-456-7890",
                            BusinessServices = "",
                            BusinessType = "seller",
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business4.com",
                            PrimaryContactFirstName = "Linda",
                            PrimaryContactLastName = "Johnson",
                            PrimaryJobTitle = "CEO",
                            PrimaryPhoneNumber = "423-456-7890",
                            RegistrationNumber = "REG42345",
                            UserId = "9"
                        },
                        new
                        {
                            BusinessId = 5,
                            Address = "123 Main St, Amman, Jordan",
                            BusinessEmail = "business5@example.com",
                            BusinessName = "Business 5",
                            BusinessPhoneNumber = "523-456-7890",
                            BusinessServices = "",
                            BusinessType = "buyer",
                            CompanyVision = "",
                            Images = "",
                            LinkedIn = "",
                            PrimaryContactEmail = "contact@business5.com",
                            PrimaryContactFirstName = "Sarah",
                            PrimaryContactLastName = "Williams",
                            PrimaryJobTitle = "Manager",
                            PrimaryPhoneNumber = "523-456-7890",
                            RegistrationNumber = "REG52345",
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("api.Models.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IndividualId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Individuals");

                    b.HasData(
                        new
                        {
                            IndividualId = 1,
                            Address = "{\"street\":\"123 Main St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Alice",
                            LastName = "Williams",
                            PhoneNumber = "987-654-3210",
                            UserId = "11"
                        },
                        new
                        {
                            IndividualId = 2,
                            Address = "{\"street\":\"456 Oak St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Bob",
                            Image = "profilepic2.jpg",
                            LastName = "Johnson",
                            PhoneNumber = "987-654-3220",
                            UserId = "12"
                        },
                        new
                        {
                            IndividualId = 3,
                            Address = "{\"street\":\"789 Pine St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Charlie",
                            Image = "profilepic3.jpg",
                            LastName = "Smith",
                            PhoneNumber = "987-654-3230",
                            UserId = "13"
                        },
                        new
                        {
                            IndividualId = 4,
                            Address = "{\"street\":\"123 Birch St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "David",
                            Image = "profilepic4.jpg",
                            LastName = "Davis",
                            PhoneNumber = "987-654-3240",
                            UserId = "14"
                        },
                        new
                        {
                            IndividualId = 5,
                            Address = "{\"street\":\"456 Maple St\",\"city\":\"Amman\",\"country\":\"Jordan\"}",
                            FirstName = "Eva",
                            Image = "profilepic5.jpg",
                            LastName = "Martin",
                            PhoneNumber = "987-654-3250",
                            UserId = "15"
                        });
                });

            modelBuilder.Entity("api.Models.Notification", b =>
                {
                    b.Property<int>("NotificationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationsId"));

                    b.Property<string>("NotificationsInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationsId");

                    b.HasIndex("UserId1");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("api.Models.TrafficLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LogId");

                    b.HasIndex("UserId1");

                    b.ToTable("TrafficLog");
                });

            modelBuilder.Entity("api.Models.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId1");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("api.Models.WatchList", b =>
                {
                    b.Property<int>("WatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WatchId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId1");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.ActivityLog", b =>
                {
                    b.HasOne("api.Models.Action", "Action")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Auctions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("api.Models.BiddingHistory", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Biddings")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "Bidder")
                        .WithMany()
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Bidder");
                });

            modelBuilder.Entity("api.Models.Business", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithOne("Business")
                        .HasForeignKey("api.Models.Business", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Individual", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithOne("Individual")
                        .HasForeignKey("api.Models.Individual", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Notification", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.TrafficLog", b =>
                {
                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.TransactionHistory", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.WatchList", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Action", b =>
                {
                    b.Navigation("ActivityLogs");
                });

            modelBuilder.Entity("api.Models.ApplicationUser", b =>
                {
                    b.Navigation("Business")
                        .IsRequired();

                    b.Navigation("Individual")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.Navigation("Biddings");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Auctions");
                });
#pragma warning restore 612, 618
        }
    }
}

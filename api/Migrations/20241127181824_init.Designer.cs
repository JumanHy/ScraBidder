// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241127181824_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("api.Models.ActivityLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("ActionId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.Property<int>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuctionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuctionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentBid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReservePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<decimal>("StartingBid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AuctionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            AuctionId = 1,
                            Address = "{\"city\": \"New York\", \"state\": \"NY\"}",
                            AuctionStatus = "Started",
                            CategoryId = 1,
                            Condition = "Mixed",
                            CreatedAt = new DateTime(2024, 11, 17, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8400),
                            CurrentBid = 650.00m,
                            Description = "A collection of high-grade aluminum scraps.",
                            EndingTime = new DateTime(2024, 12, 2, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8407),
                            Images = "[\"aluminum1.jpg\", \"aluminum2.jpg\"]",
                            Quantity = 100m,
                            ReservePrice = 800.00m,
                            SellerId = 4,
                            StartingBid = 500.00m,
                            StartingTime = new DateTime(2024, 11, 22, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8407),
                            Title = "Aluminum Scrap Bundle"
                        },
                        new
                        {
                            AuctionId = 2,
                            Address = "{\"city\": \"Los Angeles\", \"state\": \"CA\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 2,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 10, 28, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8417),
                            CurrentBid = 1200.00m,
                            Description = "Various grades of copper wiring ready for recycling.",
                            EndingTime = new DateTime(2024, 11, 12, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8418),
                            Images = "[\"copper1.jpg\", \"copper2.jpg\"]",
                            Quantity = 200m,
                            ReservePrice = 1500.00m,
                            SellerId = 4,
                            StartingBid = 1000.00m,
                            StartingTime = new DateTime(2024, 11, 2, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8418),
                            Title = "Copper Wiring Scrap"
                        },
                        new
                        {
                            AuctionId = 3,
                            Address = "{\"city\": \"Houston\", \"state\": \"TX\"}",
                            AuctionStatus = "Started",
                            CategoryId = 3,
                            Condition = "New",
                            CreatedAt = new DateTime(2024, 11, 22, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8422),
                            CurrentBid = 450.00m,
                            Description = "Recyclable plastic waste from industrial sources.",
                            EndingTime = new DateTime(2024, 12, 4, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8423),
                            Images = "[\"plastic1.jpg\"]",
                            Quantity = 50m,
                            ReservePrice = 600.00m,
                            SellerId = 4,
                            StartingBid = 300.00m,
                            StartingTime = new DateTime(2024, 11, 24, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8422),
                            Title = "Plastic Waste"
                        },
                        new
                        {
                            AuctionId = 4,
                            Address = "{\"city\": \"Chicago\", \"state\": \"IL\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 4,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 7, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8426),
                            CurrentBid = 800.00m,
                            Description = "Scrap iron sheets from old construction projects.",
                            EndingTime = new DateTime(2024, 11, 17, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8427),
                            Images = "[\"iron1.jpg\", \"iron2.jpg\"]",
                            Quantity = 300m,
                            ReservePrice = 1000.00m,
                            SellerId = 4,
                            StartingBid = 700.00m,
                            StartingTime = new DateTime(2024, 11, 9, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8427),
                            Title = "Iron Sheets"
                        },
                        new
                        {
                            AuctionId = 5,
                            Address = "{\"city\": \"Dallas\", \"state\": \"TX\"}",
                            AuctionStatus = "Started",
                            CategoryId = 5,
                            Condition = "New",
                            CreatedAt = new DateTime(2024, 11, 19, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8430),
                            CurrentBid = 1600.00m,
                            Description = "Premium-grade stainless steel scrap materials.",
                            EndingTime = new DateTime(2024, 11, 30, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8433),
                            Images = "[\"steel1.jpg\", \"steel2.jpg\"]",
                            Quantity = 150m,
                            ReservePrice = 2000.00m,
                            SellerId = 4,
                            StartingBid = 1500.00m,
                            StartingTime = new DateTime(2024, 11, 20, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8433),
                            Title = "Stainless Steel Scraps"
                        },
                        new
                        {
                            AuctionId = 6,
                            Address = "{\"city\": \"Atlanta\", \"state\": \"GA\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 6,
                            Condition = "Mixed",
                            CreatedAt = new DateTime(2024, 10, 8, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8437),
                            CurrentBid = 250.00m,
                            Description = "Recyclable wooden pallets from warehouses.",
                            EndingTime = new DateTime(2024, 10, 18, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8438),
                            Images = "[\"wood1.jpg\", \"wood2.jpg\"]",
                            Quantity = 500m,
                            ReservePrice = 300.00m,
                            SellerId = 4,
                            StartingBid = 200.00m,
                            StartingTime = new DateTime(2024, 10, 10, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8437),
                            Title = "Wooden Pallets"
                        },
                        new
                        {
                            AuctionId = 7,
                            Address = "{\"city\": \"Phoenix\", \"state\": \"AZ\"}",
                            AuctionStatus = "Started",
                            CategoryId = 7,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 17, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8441),
                            CurrentBid = 550.00m,
                            Description = "Glass shards from old construction materials.",
                            EndingTime = new DateTime(2024, 11, 29, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8442),
                            Images = "[\"glass1.jpg\"]",
                            Quantity = 250m,
                            ReservePrice = 700.00m,
                            SellerId = 4,
                            StartingBid = 400.00m,
                            StartingTime = new DateTime(2024, 11, 20, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8441),
                            Title = "Glass Shards"
                        },
                        new
                        {
                            AuctionId = 8,
                            Address = "{\"city\": \"Seattle\", \"state\": \"WA\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 8,
                            Condition = "Mixed",
                            CreatedAt = new DateTime(2024, 11, 2, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8445),
                            CurrentBid = 150.00m,
                            Description = "Paper waste from old documents and magazines.",
                            EndingTime = new DateTime(2024, 11, 12, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8447),
                            Images = "[\"paper1.jpg\"]",
                            Quantity = 1000m,
                            ReservePrice = 200.00m,
                            SellerId = 4,
                            StartingBid = 100.00m,
                            StartingTime = new DateTime(2024, 11, 7, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8446),
                            Title = "Paper Waste"
                        },
                        new
                        {
                            AuctionId = 9,
                            Address = "{\"city\": \"San Francisco\", \"state\": \"CA\"}",
                            AuctionStatus = "Started",
                            CategoryId = 9,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 11, 22, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8453),
                            CurrentBid = 350.00m,
                            Description = "Used rubber tires ready for recycling.",
                            EndingTime = new DateTime(2024, 12, 3, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8454),
                            Images = "[\"rubber1.jpg\"]",
                            Quantity = 400m,
                            ReservePrice = 500.00m,
                            SellerId = 4,
                            StartingBid = 300.00m,
                            StartingTime = new DateTime(2024, 11, 23, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8454),
                            Title = "Rubber Tires"
                        },
                        new
                        {
                            AuctionId = 10,
                            Address = "{\"city\": \"Denver\", \"state\": \"CO\"}",
                            AuctionStatus = "Ended",
                            CategoryId = 11,
                            Condition = "Used",
                            CreatedAt = new DateTime(2024, 10, 28, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8458),
                            CurrentBid = 600.00m,
                            Description = "Scrap ceramic tiles from construction sites.",
                            EndingTime = new DateTime(2024, 11, 9, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8459),
                            Images = "[\"ceramic1.jpg\"]",
                            Quantity = 50m,
                            ReservePrice = 700.00m,
                            SellerId = 4,
                            StartingBid = 500.00m,
                            StartingTime = new DateTime(2024, 10, 30, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8458),
                            Title = "Ceramic Tiles"
                        });
                });

            modelBuilder.Entity("api.Models.BiddingHistory", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<decimal>("BidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("BidTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BidderId")
                        .HasColumnType("int");

                    b.HasKey("BidId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BidderId");

                    b.ToTable("BiddingHistory");
                });

            modelBuilder.Entity("api.Models.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BusinessServices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessType")
                        .HasColumnType("int");

                    b.Property<string>("CompanyVision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContactFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryContactLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryJobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Aluminum"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Copper"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Plastic"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Iron"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Stainless Steel"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Wood"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "Glass"
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "Paper"
                        },
                        new
                        {
                            CategoryId = 9,
                            CategoryName = "Rubber"
                        },
                        new
                        {
                            CategoryId = 10,
                            CategoryName = "Textile"
                        },
                        new
                        {
                            CategoryId = 11,
                            CategoryName = "Ceramic"
                        });
                });

            modelBuilder.Entity("api.Models.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IndividualId");

                    b.HasIndex("UserId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("api.Models.Notification", b =>
                {
                    b.Property<int>("NotificationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationsId"));

                    b.Property<string>("NotificationsInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationsId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Individual"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Business"
                        });
                });

            modelBuilder.Entity("api.Models.Shipment", b =>
                {
                    b.Property<int>("ShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("ShipmentId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("SellerId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("api.Models.TransactionHistory", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccountStatus = "Approved",
                            CreatedAt = new DateTime(2024, 11, 27, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8364),
                            Email = "admin@example.com",
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            AccountStatus = "Approved",
                            CreatedAt = new DateTime(2024, 11, 27, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8368),
                            Email = "individual@example.com",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            AccountStatus = "Approved",
                            CreatedAt = new DateTime(2024, 11, 27, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8369),
                            Email = "individual2@example.com",
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            AccountStatus = "Approved",
                            CreatedAt = new DateTime(2024, 11, 27, 18, 18, 23, 812, DateTimeKind.Utc).AddTicks(8370),
                            Email = "business@example.com",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("api.Models.WatchList", b =>
                {
                    b.Property<int>("WatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WatchId"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WatchId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("api.Models.ActivityLog", b =>
                {
                    b.HasOne("api.Models.Action", "Action")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Auctions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("api.Models.BiddingHistory", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Biddings")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Bidder")
                        .WithMany()
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Bidder");
                });

            modelBuilder.Entity("api.Models.Business", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Individual", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Notification", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Shipment", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Shipments")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("api.Models.TransactionHistory", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany("Transactions")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.HasOne("api.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Models.WatchList", b =>
                {
                    b.HasOne("api.Models.Auction", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Action", b =>
                {
                    b.Navigation("ActivityLogs");
                });

            modelBuilder.Entity("api.Models.Auction", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Shipments");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Auctions");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
